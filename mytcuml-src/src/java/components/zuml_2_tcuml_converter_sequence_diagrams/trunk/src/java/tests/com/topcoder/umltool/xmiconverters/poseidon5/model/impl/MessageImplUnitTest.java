/*
 * Copyright (C) 2007 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.umltool.xmiconverters.poseidon5.model.impl;

import com.topcoder.uml.model.actions.messagingactions.CallOperationAction;
import com.topcoder.uml.model.commonbehavior.instances.Stimulus;
import com.topcoder.uml.model.commonbehavior.links.Link;
import com.topcoder.uml.model.core.extensionmechanisms.StereotypeImpl;

import com.topcoder.umltool.xmiconverters.poseidon5.model.EventOccurrence;
import com.topcoder.umltool.xmiconverters.poseidon5.model.Message;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;


/**
 * <p>
 * Unit tests for <code>MessageImpl</code> class.
 * </p>
 *
 * @author zhengjuyu
 * @version 1.0
 */
public class MessageImplUnitTest extends TestCase {
    /**
     * <p>Returns the test suite of this class.</p>
     *
     * @return the test suite of this class.
     */
    public static Test suite() {
        return new TestSuite(MessageImplUnitTest.class);
    }

    /**
     * <p>
     * Accuracy test for constructor <code>MessageImpl()</code>.
     * </p>
     */
    public void testCtor() {
        Message msg = new MessageImpl();
        assertNotNull("Unable to create MessageImpl instance.", msg);
    }

    /**
     * <p>
     * Accuracy test for <code>toTCUMLElement()</code>.
     * Verify whether the Message is transformed to Link, the generated Link should have the
     * same name and Stereotype to the Message's. And the generated Link should have a stimulus
     * and connection which is generated by the message.
     * </p>
     */
    public void testToTCUMLElement1() {
        Message msg = new MessageImpl();
        msg.setName("name");

        msg.addStereotype(new StereotypeImpl());
        msg.addStereotype(new StereotypeImpl());

        msg.setReceiveEvent(new EventOccurrenceImpl());

        Link link = msg.toTCUMLElement();
        assertNotNull("Unable to transform the message to Link.", link);
        assertEquals("The name should match.", "name", link.getName());
        assertEquals("It has 1 connection.", 1, link.getConnections().size());
        assertEquals("It has 1 stimulus.", 1, link.getStimuli().size());
        assertEquals("It has 2 stereotype.", 2, link.getStereotypes().size());
    }

    /**
     * <p>
     * Accuracy test for <code>toTCUMLElement()</code>.
     * Verify that the toTCUMLElement() should always return the same instance.
     * </p>
     */
    public void testToTCUMLElement2() {
        Message msg = new MessageImpl();
        msg.setName("name");

        msg.addStereotype(new StereotypeImpl());
        msg.addStereotype(new StereotypeImpl());

        msg.setReceiveEvent(new EventOccurrenceImpl());

        assertEquals("The toTCUMLElement()'s return value should always the same.",
            msg.toTCUMLElement(), msg.toTCUMLElement());
    }

    /**
     * <p>
     * Accuracy test for <code>toTCUMLStimulus()</code>.
     * Test whether the Asynch call is transformed successfully, the generated stimulus
     * should have an asynchronous action.
     * </p>
     */
    public void testToTCUMLStimulus1() {
        //Asynch Call
        Message msg = new MessageImpl();

        msg.setMessageSort("asynchCall");

        EventOccurrence event = new EventOccurrenceImpl();
        event.setStartExec(new ExecutionOccurrenceImpl());
        msg.setReceiveEvent(event);

        Stimulus stimulus = msg.toTCUMLStimulus();
        assertNotNull("The stimulus should be transformed.", stimulus);
        assertTrue("This is asynchCall.",
            ((CallOperationAction) (stimulus.getDispatchAction().getAction())).isAsynchronous());
    }

    /**
     * <p>
     * Accuracy test for <code>toTCUMLStimulus()</code>.
     * Test whether the Synch call is transformed successfully, the generated stimulus
     * should have a synchronous action.
     * </p>
     */
    public void testToTCUMLStimulus2() {
        //Synch Call
        Message msg = new MessageImpl();

        msg.setMessageSort("synchCall");

        EventOccurrence event = new EventOccurrenceImpl();
        event.setStartExec(new ExecutionOccurrenceImpl());
        msg.setReceiveEvent(event);

        Stimulus stimulus = msg.toTCUMLStimulus();
        assertNotNull("The stimulus should be transformed.", stimulus);
        assertFalse("This is asynchCall.",
            ((CallOperationAction) (stimulus.getDispatchAction().getAction())).isAsynchronous());
    }

    /**
     * <p>
     * Accuracy test for <code>toTCUMLStimulus()</code>.
     * Verify that when the synchCall message's receive event is null, the stimulus should have
     * no actions.
     * </p>
     */
    public void testToTCUMLStimulus3() {
        //Synch Call
        Message msg = new MessageImpl();

        msg.setMessageSort("synchCall");

        Stimulus stimulus = msg.toTCUMLStimulus();

        assertNotNull("The stimulus should be transformed.", stimulus);
        assertNull("The procedure's action should be null.",
            stimulus.getDispatchAction().getAction());
    }

    /**
     * <p>
     * Accuracy test for <code>toTCUMLStimulus()</code>.
     * Verify that when the synchCall message's startExec is null, the stimulus should have
     * no actions.
     * </p>
     */
    public void testToTCUMLStimulus4() {
        //The receiveEvent's startExec is null
        Message msg = new MessageImpl();

        msg.setMessageSort("synchCall");

        EventOccurrence event = new EventOccurrenceImpl();
        msg.setReceiveEvent(event);

        Stimulus stimulus = msg.toTCUMLStimulus();
        assertNotNull("The stimulus should be transformed.", stimulus);
        assertNull("The procedure's action should be null.",
            stimulus.getDispatchAction().getAction());
    }

    /**
     * <p>
     * Accuracy test for <code>toTCUMLStimulus()</code>.
     * Verify that the toTCUMLStimulus() should always return the same instance.
     * </p>
     */
    public void testToTCUMLStimulus5() {
        //Synch Call
        Message msg = new MessageImpl();

        msg.setMessageSort("synchCall");

        assertEquals("The toTCUMLStimulus should always return the same value.",
            msg.toTCUMLStimulus(), msg.toTCUMLStimulus());
    }

    /**
     * <p>
     * Accuracy test for <code>getMessageSort()</code>.
     * </p>s
     */
    public void testGetMessageSort() {
        Message msg = new MessageImpl();

        assertNull("The messageSort's default value is null.",
            msg.getMessageSort());

        msg.setMessageSort("asynchCall");
        assertEquals("The message should be asynchCall.", "asynchCall",
            msg.getMessageSort());

        msg.setMessageSort("synchCall");
        assertEquals("The message should be synchCall.", "synchCall",
            msg.getMessageSort());
    }

    /**
     * <p>
     * Accuracy test for <code>setMessageSort(String)</code>.
     * </p>
     */
    public void testSetMessageSort() {
        Message msg = new MessageImpl();

        msg.setMessageSort("asynchCall");
        assertEquals("The message should be asynchCall.", "asynchCall",
            msg.getMessageSort());

        msg.setMessageSort("synchCall");
        assertEquals("The message should be synchCall.", "synchCall",
            msg.getMessageSort());
    }

    /**
     * <p>
     * Failure test for <code>setMessageSort(String)</code>.
     * </p>
     *
     * <p>
     * Failure cause: If the messageSort is null,
     * IllegalArgumentException is expected.
     * </p>
     */
    public void testSetMessageSort_Failure1() {
        try {
            Message msg = new MessageImpl();
            msg.setMessageSort(null);

            fail("IllegalArgumentException is expected.");
        } catch (IllegalArgumentException e) {
            //success
        }
    }

    /**
     * <p>
     * Failure test for <code>setMessageSort(String)</code>.
     * </p>
     *
     * <p>
     * Failure cause: If the messageSort is not one of  (asynchCall, synchCall),
     * IllegalArgumentException is expected.
     * </p>
     */
    public void testSetMessageSort_Failure2() {
        try {
            Message msg = new MessageImpl();
            msg.setMessageSort("call");

            fail("IllegalArgumentException is expected.");
        } catch (IllegalArgumentException e) {
            //success
        }
    }

    /**
     * <p>
     * Accuracy test for <code>setReceiveEvent(EventOccurrence)</code>.
     * </p>
     */
    public void testSetReceiveEvent() {
        Message msg = new MessageImpl();
        EventOccurrence event = new EventOccurrenceImpl();

        msg.setReceiveEvent(event);
        assertEquals("The event should match.", event, msg.getReceiveEvent());

        msg.setReceiveEvent(null);
        assertNull("The event should be set to null.", msg.getReceiveEvent());
    }

    /**
     * <p>
     * Accuracy test for <code>getReceiveEvent()</code>.
     * </p>
     */
    public void testGetReceiveEvent() {
        Message msg = new MessageImpl();
        EventOccurrence event = new EventOccurrenceImpl();

        assertNull("The default receive event is null.", msg.getReceiveEvent());

        msg.setReceiveEvent(event);
        assertEquals("The event should match.", event, msg.getReceiveEvent());
    }

    /**
     * <p>
     * Accuracy test for <code>setSendEvent(EventOccurrence)</code>.
     * </p>
     */
    public void testSetSendEvent() {
        Message msg = new MessageImpl();
        EventOccurrence event = new EventOccurrenceImpl();

        msg.setSendEvent(event);
        assertEquals("The event should match.", event, msg.getSendEvent());

        msg.setSendEvent(null);
        assertNull("The event should be set to null.", msg.getSendEvent());
    }

    /**
     * <p>
     * Accuracy test for <code>getSendEvent()</code>.
     * </p>
     */
    public void testGetSendEvent() {
        Message msg = new MessageImpl();
        EventOccurrence event = new EventOccurrenceImpl();

        assertNull("The default send event is null.", msg.getSendEvent());

        msg.setSendEvent(event);
        assertEquals("The event should match.", event, msg.getSendEvent());
    }
}
