/* * Copyright (C) 2006 TopCoder Inc., All Rights Reserved. */package com.topcoder.uml.model.core.dependencies.accuracytests;
import java.util.ArrayList;import java.util.Collection;import junit.framework.TestCase;import com.topcoder.uml.model.core.auxiliaryelements.TemplateArgument;import com.topcoder.uml.model.core.auxiliaryelements.TemplateArgumentImpl;import com.topcoder.uml.model.core.dependencies.Binding;import com.topcoder.uml.model.core.dependencies.BindingImpl;import com.topcoder.uml.model.core.dependencies.Dependency;

/**
 * <p>Unit test for BindingImpl.</p> * * @author singlewood * @version 1.0 */
public class BindingImplTests extends TestCase {    /**     * Instance of BindingImpl for test.     */    private BindingImpl bindingImpl;    /**     * Instance of TemplateArgument for test.     */    private TemplateArgument[] templateArguemntArray;    /**     * Instance of Collection for test.     */    private Collection<TemplateArgument> collection;    /**     * Set up for tests.     *     * @throws Exception throw to JUnit.     */    protected void setUp() throws Exception {        bindingImpl = new BindingImpl();        templateArguemntArray = new TemplateArgument[10];        collection = new ArrayList<TemplateArgument>();        for (int i = 0; i < templateArguemntArray.length; i++) {            templateArguemntArray[i] = new TemplateArgumentImplAcc(i);            collection.add(templateArguemntArray[i]);        }    }    /**     * Test constructor.     *     * @throws Exception throw to JUnit.     */    public void testConstructor() throws Exception {        bindingImpl = new BindingImpl();        assertNotNull(bindingImpl);    }    /**     * Test if the BindingImpl extends Dependency.     *     * @throws Exception throw to JUnit.     */    public void testExtendsBindingImpl() throws Exception {        assertTrue("BindingImpl didn't extends Dependency",                bindingImpl instanceof Dependency);    }    /**     * Test if the BindingImpl implement Binding.     *     * @throws Exception throw to JUnit.     */    public void testBindingImpl() throws Exception {        assertTrue("BindingImpl didn't implement Binding", bindingImpl instanceof Binding);    }    /**     * Test addArgument(TemplateArgument argument). See if it correctly add the TemplateArgument to the bindingImpl.     *     * @throws Exception throw to JUnit.     */    public void testAddArgument() throws Exception {        bindingImpl.addArgument(templateArguemntArray[0]);        assertEquals("BindingImpl#addArgument doesn't work properly.", 1, bindingImpl.getArguments().size());        ArrayList<TemplateArgument> list = (ArrayList<TemplateArgument>) bindingImpl.getArguments();        TemplateArgumentImplAcc acc = (TemplateArgumentImplAcc) list.get(0);        assertEquals("The arguments doesn't successfully added to bindingImpl",                ((TemplateArgumentImplAcc) templateArguemntArray[0]).getI(), acc.getI());    }    /**     * Test addArgument(int index, TemplateArgument argument).     * See if it correctly add the TemplateArgument to the bindingImpl at correct index.     *     * @throws Exception throw to JUnit.     */    public void testAddArgumentIndex() throws Exception {        bindingImpl.addArgument(templateArguemntArray[0]);        bindingImpl.addArgument(templateArguemntArray[1]);        bindingImpl.addArgument(templateArguemntArray[2]);        bindingImpl.addArgument(1, templateArguemntArray[6]);        assertEquals("BindingImpl#addArgument doesn't work properly.", 4, bindingImpl.getArguments().size());        ArrayList<TemplateArgument> list = (ArrayList<TemplateArgument>) bindingImpl.getArguments();        TemplateArgumentImplAcc acc = (TemplateArgumentImplAcc) list.get(1);        assertEquals("The arguments doesn't successfully added to bindingImpl",                ((TemplateArgumentImplAcc) templateArguemntArray[6]).getI(), acc.getI());    }    /**     * Test addArguments. See if it correctly add the TemplateArguments to the bindingImpl.     *     * @throws Exception throw to JUnit.     */    public void testAddArguments() throws Exception {        bindingImpl.addArguments(collection);        assertEquals("BindingImpl#addArguments doesn't work properly.", 10, bindingImpl.getArguments().size());        // Test every element in the arguments.        ArrayList<TemplateArgument> list = (ArrayList<TemplateArgument>) bindingImpl.getArguments();        for (TemplateArgument element : list) {            assertTrue("The arguments doesn't successfully added to bindingImpl",                    collection.contains(element));        }    }    /**     * Test addArguments(Collection<TemplateArgument> arguments).     * See if it correctly add the TemplateArguments to the bindingImpl in the right index.     *     * @throws Exception throw to JUnit.     */    public void testAddArgumentsIndex() throws Exception {        bindingImpl.addArgument(templateArguemntArray[0]);        bindingImpl.addArgument(templateArguemntArray[1]);        bindingImpl.addArgument(templateArguemntArray[2]);        bindingImpl.addArguments(1, collection);        assertEquals("BindingImpl#addArguments doesn't work properly.", 13, bindingImpl.getArguments().size());        // Test every element in the arguments.        ArrayList<TemplateArgument> list = (ArrayList<TemplateArgument>) bindingImpl.getArguments();        TemplateArgumentImplAcc acc = (TemplateArgumentImplAcc) list.get(12);        assertEquals("The arguments doesn't successfully added to bindingImpl",                ((TemplateArgumentImplAcc) templateArguemntArray[2]).getI(), acc.getI());    }    /**     * Test setArgument     * See if it correctly set the TemplateArguments to the bindingImpl in the right index.     *     * @throws Exception throw to JUnit.     */    public void testSetArgumentsIndex() throws Exception {        bindingImpl.addArgument(templateArguemntArray[0]);        bindingImpl.addArgument(templateArguemntArray[1]);        bindingImpl.addArgument(templateArguemntArray[2]);        bindingImpl.setArgument(1, templateArguemntArray[6]);        assertEquals("BindingImpl#addArguments doesn't work properly.", 3, bindingImpl.getArguments().size());        // Test every element in the arguments.        ArrayList<TemplateArgument> list = (ArrayList<TemplateArgument>) bindingImpl.getArguments();        TemplateArgumentImplAcc acc = (TemplateArgumentImplAcc) list.get(1);        assertEquals("The arguments doesn't successfully added to bindingImpl",                ((TemplateArgumentImplAcc) templateArguemntArray[6]).getI(), acc.getI());    }    /**     * Test removeArgument. See if it correctly remove an element from bindingImpl.     *     * @throws Exception throw to JUnit.     */    public void testRemoveArgumentSuccess() throws Exception {        //Add test collection to bindingImpl.        bindingImpl.addArguments(collection);        assertEquals("BindingImpl#addArguments doesn't work properly.", 10, bindingImpl.getArguments().size());        // Remove one element.        assertTrue("Remove failed.", bindingImpl.removeArgument(templateArguemntArray[5]));        assertEquals("BindingImpl#removeArgument doesn't work properly.", 9, bindingImpl.getArguments().size());        // Test every element in the arguments.        ArrayList<TemplateArgument> list = (ArrayList<TemplateArgument>) bindingImpl.getArguments();        assertFalse("the element was not removed successfully.", list.contains(templateArguemntArray[5]));    }    /**     * Test removeArgument. The element to be removed doesn't contained in bindingImpl.     *     * @throws Exception throw to JUnit.     */    public void testRemoveArgumentFailure() throws Exception {        //Add test collection to bindingImpl.        bindingImpl.addArguments(collection);        assertEquals("BindingImpl#addArguments doesn't work properly.", 10, bindingImpl.getArguments().size());        // Remove the element.        assertFalse("Remove failed.", bindingImpl.removeArgument(new TemplateArgumentImpl()));        assertEquals("BindingImpl#removeArgument doesn't work properly.", 10, bindingImpl.getArguments().size());    }    /**     * Test removeArguments.  See if it correctly remove all the element from bindingImpl.     *     * @throws Exception throw to JUnit.     */    public void testRemoveArgumentsSuccess() throws Exception {        //Add test collection to bindingImpl.        bindingImpl.addArguments(collection);        assertEquals("BindingImpl#addArguments doesn't work properly.", 10, bindingImpl.getArguments().size());        // Remove the element.        assertTrue("Remove failed.", bindingImpl.removeArguments(collection));        assertEquals("BindingImpl#removeArguments doesn't work properly.", 0, bindingImpl.getArguments().size());    }    /**     * Test removeArguments.  See if it correctly remove all the element from bindingImpl.     *     * @throws Exception throw to JUnit.     */    public void testRemoveArgumentsSuccess2() throws Exception {        //Add test collection to bindingImpl.        bindingImpl.addArguments(collection);        assertEquals("BindingImpl#addArguments doesn't work properly.", 10, bindingImpl.getArguments().size());        collection.add(new TemplateArgumentImpl());        // Remove the element.        assertTrue("Remove failed.", bindingImpl.removeArguments(collection));        assertEquals("BindingImpl#removeArguments doesn't work properly.", 0, bindingImpl.getArguments().size());    }    /**     * Test clearArguments.  See if it clear all the element in the collection.     *     * @throws Exception throw to JUnit.     */    public void testClearArguments() throws Exception {        //Add test collection to bindingImpl.        bindingImpl.addArguments(collection);        assertEquals("BindingImpl#addArguments doesn't work properly.", 10, bindingImpl.getArguments().size());        // Remove the element.        bindingImpl.clearArguments();        assertEquals("BindingImpl#clearArguments doesn't work properly.", 0, bindingImpl.getArguments().size());    }    /**     * Test getArguments.  See if it can get the shallow copy of arguments.     *     * @throws Exception throw to JUnit.     */    public void testGetArguments() throws Exception {        //Add test collection to bindingImpl.        bindingImpl.addArguments(collection);        assertEquals("bindingImpl#addArguments doesn't work properly.", 10, bindingImpl.getArguments().size());        // Test every element in the arguments.        ArrayList<TemplateArgument> list = (ArrayList<TemplateArgument>) bindingImpl.getArguments();        for (TemplateArgument element : list) {            assertTrue("The arguments doesn't successfully added to bindingImpl",                    collection.contains(element));        }        // shallow copy test.        Collection<TemplateArgument> innerArguments =            (Collection<TemplateArgument>) AccuracyHelper            .getPrivateField(BindingImpl.class, bindingImpl, "arguments");        assertNotSame("shallow copy failed.", innerArguments, bindingImpl.getArguments());    }    /**     * Test containsArgument.  See if it correctly judge the existence of element.     *     * @throws Exception throw to JUnit.     */    public void testContainsArgument() throws Exception {        //Add test collection to bindingImpl.        bindingImpl.addArguments(collection);        for (int i = 0; i < templateArguemntArray.length; i++) {            assertTrue("bindingImpl#containsArgument doesn't work properly.",                    bindingImpl.containsArgument((templateArguemntArray[i])));        }        assertFalse("bindingImpl#clearArguments doesn't work properly.",                bindingImpl.containsArgument(new TemplateArgumentImpl()));    }    /**     * Test indexOfArgument.  See if it correctly return the index of the element.     * @throws Exception throw to JUnit.     */    public void testIndexOfArgument() throws Exception {        //Add test collection to bindingImpl.        bindingImpl.addArguments(collection);        assertEquals("BindingImpl#addArguments doesn't work properly.", 10, bindingImpl.getArguments().size());        for (int i = 0; i < templateArguemntArray.length; i++) {            assertEquals("BindingImpl#indexOfArgument doesn't work properly",                    i, bindingImpl.indexOfArgument(templateArguemntArray[i]));        }    }    /**     * Test countArguments.  See if it correctly count the size of inner list.     *     * @throws Exception throw to JUnit.     */    public void testCountArguments() throws Exception {        //Add test collection to bindingImpl.        bindingImpl.addArguments(collection);        assertEquals("BindingImpl#addArguments doesn't work properly.", 10, bindingImpl.getArguments().size());        assertEquals("BindingImpl#clearArguments doesn't work properly.", 10, bindingImpl.countArguments());    }
}
