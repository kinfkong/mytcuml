/*
 * Copyright (C) 2007 TopCoder Inc., All Rights Reserved.
 */
package com.topcoder.swing.imageexporter;

import com.topcoder.util.config.ConfigManager;

import junit.framework.TestCase;

import java.awt.Rectangle;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JComponent;


/**
 * <p>Demo for ImageExporter. The demo includes two parts, codes and configs(config can be found
 * as \test_files\DemoConfig.xml). In this demo, the full usage of this component is shown.</p>
 *  <ul>
 *      <li>Customizes the ImageExporter to support more image formats</li>
 *      <li>Exports component(s) with all default supported formats</li>
 *      <li>Exports component(s) to file(s)</li>
 *      <li>Exports component(s) to outputstream(s)</li>
 *      <li>Exports component(s) with viewport restriction</li>
 *  </ul>
 *  <p><strong>Files generated by this demo can be found in test_files\output.</strong></p>
 *
 * @author TCSDEVELOPER
 * @version 1.0
 */
public class Demo extends TestCase {
    /** Default config used in this demo. */
    private static final String CONFIG = "DemoConfig.xml";

    /** Default output dir used in this demo. */
    private static final String OUTPUT_DIR = TestHelper.getOutputPath();

    /** Default ImageExporter used in this demo. */
    private ImageExporter exporter;

    /** Default component used in this demo. */
    private PrintFrame frame;

    /** Default viewport used in this demo. */
    private Rectangle viewport;

    /**
     * This demo shows how to use the component in custom way. More details on how to customize the component can
     * be found in test_files/DemoConfig.xml. User can:
     *  <ul>
     *      <li>tunes the rendering hints for optimizing the export result</li>
     *      <li>changes the image type for rendering</li>
     *      <li>plugs in new encoder for supporting new format</li>
     *      <li>plugs in new JComponentImageExporter for supporting more formats</li>
     *  </ul>
     *
     * @throws Exception to junit
     */
    public void testCustomExporter() throws Exception {
        JComponent jComponent = frame.getPrintingComponent();

        //extra encoder is plugged in to ImageManipulationImageExporterProperties for format 'custom_format'
        exporter.exportComponent(jComponent, OUTPUT_DIR, "custom_exporter_success.custom_format", "custom_format");

        try {
            //try to export with 'txt', the file should not be generated since it's not supported originally
            exporter.exportComponent(jComponent, OUTPUT_DIR, "custom_exporter_fail.txt", "txt");
            fail("txt is not supported");
        } catch (IllegalArgumentException e) {
            //the default ImageExporter can not support the format 'txt' originally
        }

        //see the namespace 'custom_exporter' and 'ImageManipulationImageExporterProperties' in DemoConfig for more
        //detail. In this config, MockJComponentImageExporter is added to support the format: txt
        exporter = new ImageExporter("custom_exporter");

        //now 'txt' is supported, and custom_exporter_success.txt will be generated.
        //it's a txt file
        exporter.exportComponent(jComponent, OUTPUT_DIR, "custom_exporter_success.txt", "txt");
    }

    /**
     * This demo shows exporting component with all default supporting formats.
     *
     * @throws Exception to junit
     */
    public void testExportAllSupportedFormats() throws Exception {
        JComponent jComponent = frame.getPrintingComponent();

        //jpg
        exporter.exportComponent(jComponent, OUTPUT_DIR, "all_supported_formats.jpg", ImageExporter.JPEG_FORMAT);

        //bmp
        exporter.exportComponent(jComponent, OUTPUT_DIR, "all_supported_formats.bmp", ImageExporter.BMP_FORMAT);

        //pnm
        exporter.exportComponent(jComponent, OUTPUT_DIR, "all_supported_formats.pnm", ImageExporter.PNM_FORMAT);

        //gif
        exporter.exportComponent(jComponent, OUTPUT_DIR, "all_supported_formats.gif", ImageExporter.GIF_FORMAT);

        //tiff
        exporter.exportComponent(jComponent, OUTPUT_DIR, "all_supported_formats.tiff", ImageExporter.TIFF_FORMAT);

        //png
        exporter.exportComponent(jComponent, OUTPUT_DIR, "all_supported_formats.png", ImageExporter.PNG_FORMAT);
    }

    /**
     * Basic demo showing how to export the given component(s) to file(s).
     *
     * @throws Exception to junit
     */
    public void testExportToFile() throws Exception {
        JComponent jComponent = frame.getPrintingComponent(); // component to export

        //exports a JComponent image to a file
        exporter.exportComponent(jComponent, OUTPUT_DIR, "test_export_to_file.jpg", ImageExporter.JPEG_FORMAT);

        //exports a JComponent image to a file, capturing only a rectangle area of jComponent's image
        exporter.exportComponent(jComponent, viewport, OUTPUT_DIR, "test_export_to_file_viewport.gif",
            ImageExporter.JPEG_FORMAT);

        //exports a list of JComponents to files
        List<JComponent> jComponentsList = new ArrayList<JComponent>();
        jComponentsList.add(jComponent);

        List<String> fileNamesList = new ArrayList<String>();
        fileNamesList.add("test_export_to_file_list_1.jpg");

        exporter.exportComponent(jComponentsList, OUTPUT_DIR, fileNamesList, ImageExporter.JPEG_FORMAT);

        //exports a list of JComponents to files, capturing only a rectangle area of jComponents' images
        fileNamesList = new ArrayList<String>();
        fileNamesList.add("test_export_to_file_viewport_list_1.jpg");
        exporter.exportComponent(jComponentsList, viewport, OUTPUT_DIR, fileNamesList, ImageExporter.JPEG_FORMAT);
    }

    /**
     * Basic demo showing how to export the given component(s) to the output stream(s).
     *
     * @throws Exception to junit
     */
    public void testExportToOutputStream() throws Exception {
        JComponent jComponent = frame.getPrintingComponent();
        OutputStream os = null;

        //uses FileOutputStream to export the component
        os = new FileOutputStream(OUTPUT_DIR + "test_export_to_outputStream.bmp");
        //exports a JComponent to the outputStream
        exporter.exportComponent(jComponent, os, ImageExporter.BMP_FORMAT);

        //uses FileOutputStream to export the component
        os = new FileOutputStream(OUTPUT_DIR + "test_export_to_outputStream_viewport.bmp");
        //exports a JComponent to an outputStream with viewport restricted
        exporter.exportComponent(jComponent, viewport, os, ImageExporter.BMP_FORMAT);

        //exports to a list of output streams
        List<OutputStream> outputStreamsList = new ArrayList<OutputStream>();
        outputStreamsList.add(new ByteArrayOutputStream());

        List<JComponent> jComponentsList = new ArrayList<JComponent>();
        jComponentsList.add(jComponent);
        exporter.exportComponent(jComponentsList, outputStreamsList, ImageExporter.BMP_FORMAT);

        //exports to a list of output streams with viewport restricted
        outputStreamsList = new ArrayList<OutputStream>();
        outputStreamsList.add(new ByteArrayOutputStream());

        jComponentsList = new ArrayList<JComponent>();
        jComponentsList.add(jComponent);
        exporter.exportComponent(jComponentsList, viewport, outputStreamsList, ImageExporter.BMP_FORMAT);
    }

    /**
     * Sets up environment.
     *
     * @throws Exception to junit
     */
    protected void setUp() throws Exception {
        super.setUp();
        ConfigManager.getInstance().add(CONFIG);
        frame = new PrintFrame(400, 400, "abcdefghijklmn", true);
        viewport = new Rectangle(59, 54, 41, 22);
        exporter = new ImageExporter();
    }

    /**
     * Clear environment.
     *
     * @throws Exception to junit
     */
    protected void tearDown() throws Exception {
        super.tearDown();
        frame.dispose();
        TestHelper.clearConfig();
    }
}
